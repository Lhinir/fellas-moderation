// src/commands/moderation/ban.js - DÃ¼zeltilmiÅŸ

const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const database = require('../../modules/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ban')
        .setDescription('Belirtilen kullanÄ±cÄ±yÄ± sunucudan yasaklar')
        .addUserOption(option => 
            option.setName('user')
                .setDescription('Yasaklanacak kullanÄ±cÄ±')
                .setRequired(true))
        .addStringOption(option => 
            option.setName('reason')
                .setDescription('Yasaklama sebebi')
                .setRequired(false))
        .addIntegerOption(option => 
            option.setName('days')
                .setDescription('Silinecek mesaj gÃ¼nÃ¼ (0-7)')
                .setMinValue(0)
                .setMaxValue(7)
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.BanMembers),
    
    async execute(interaction) {
        // Ã–nce deferReply kullan - iÅŸlem biraz zaman alabilir
        await interaction.deferReply();
        
        try {
            // Yetkiyi kontrol et
            if (!interaction.member.permissions.has(PermissionFlagsBits.BanMembers)) {
                return interaction.editReply('Bu komutu kullanmak iÃ§in **Ãœyeleri Yasakla** yetkisine sahip olmalÄ±sÄ±n!');
            }

            const user = interaction.options.getUser('user');
            const reason = interaction.options.getString('reason') || 'Sebep belirtilmedi';
            const days = interaction.options.getInteger('days') || 0;
            
            // Kendisini banlayamasÄ±n
            if (user.id === interaction.user.id) {
                return interaction.editReply('Kendinizi banlayamazsÄ±nÄ±z!');
            }
            
            // Botu banlayamasÄ±n
            if (user.id === interaction.client.user.id) {
                return interaction.editReply('Beni banlayamazsÄ±n!');
            }
            
            // KullanÄ±cÄ±yÄ± kontrol et
            const targetMember = await interaction.guild.members.fetch(user.id).catch(() => null);
            
            if (targetMember) {
                // Hedef banlanabilir mi kontrol et
                if (!targetMember.bannable) {
                    return interaction.editReply('Bu kullanÄ±cÄ±yÄ± yasaklama yetkim yok veya kullanÄ±cÄ± benden daha yÃ¼ksek bir role sahip.');
                }

                // Yetkili kendisinden Ã¼st rÃ¼tbeyi banlayamasÄ±n
                if (interaction.member.id !== interaction.guild.ownerId) {
                    const executorHighestRole = interaction.member.roles.highest.position;
                    const targetHighestRole = targetMember.roles.highest.position;
                    
                    if (executorHighestRole <= targetHighestRole) {
                        return interaction.editReply('Kendinizle aynÄ± veya daha yÃ¼ksek role sahip kullanÄ±cÄ±larÄ± yasaklayamazsÄ±nÄ±z.');
                    }
                }
            }
            
            // KullanÄ±cÄ±yÄ± yasakla
            await interaction.guild.members.ban(user.id, { 
                reason: `${interaction.user.tag} tarafÄ±ndan banlandÄ±: ${reason}`, 
                deleteMessageDays: days 
            });
            
            // BaÅŸarÄ±lÄ± yanÄ±t
            await interaction.editReply(`**${user.tag}** baÅŸarÄ±yla yasaklandÄ±.\n**Sebep:** ${reason}`);
            
            // VeritabanÄ±na iÅŸlemi kaydet (modActions tablosu varsa)
            try {
                await database.modActions.addAction(
                    interaction.guild.id,
                    user.id,
                    interaction.user.id,
                    'ban',
                    reason,
                    null
                );
            } catch (dbError) {
                console.error('Ban iÅŸlemi veritabanÄ±na kaydedilemedi:', dbError);
            }
            
            // Log gÃ¶nder
            await sendBanLogEmbed(interaction, user, reason, days);

        } catch (error) {
            console.error('Ban komutu hatasÄ±:', error);
            return interaction.editReply('Komut Ã§alÄ±ÅŸtÄ±rÄ±lÄ±rken bir hata oluÅŸtu!');
        }
    }
};

// Log mesajÄ± gÃ¶nderen yardÄ±mcÄ± fonksiyon
async function sendBanLogEmbed(interaction, targetUser, reason, days) {
    try {
        // Log kanalÄ±nÄ± al
        const logChannelId = await database.logs.getLogChannel(interaction.guild.id, 'moderation')
            .catch(() => null);
        
        if (!logChannelId) return;
        
        const logChannel = await interaction.guild.channels.fetch(logChannelId).catch(() => null);
        if (!logChannel) return;

        // Embed log mesajÄ± oluÅŸtur
        const logEmbed = new EmbedBuilder()
            .setColor('#ff0000') // KÄ±rmÄ±zÄ±
            .setTitle('ğŸ”¨ KullanÄ±cÄ± YasaklandÄ±')
            .setThumbnail(targetUser.displayAvatarURL())
            .addFields(
                { name: 'KullanÄ±cÄ±', value: `${targetUser.tag} (${targetUser.id})`, inline: true },
                { name: 'ModeratÃ¶r', value: `${interaction.user.tag} (${interaction.user.id})`, inline: true },
                { name: 'Sebep', value: reason || 'Belirtilmedi', inline: false },
                { name: 'Silinen Mesaj GÃ¼nÃ¼', value: `${days} gÃ¼n`, inline: true },
                { name: 'Tarih', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: false }
            )
            .setFooter({ text: `KullanÄ±cÄ± ID: ${targetUser.id}` })
            .setTimestamp();

        // Logu gÃ¶nder
        await logChannel.send({ embeds: [logEmbed] }).catch(console.error);
    } catch (error) {
        console.error('Ban log gÃ¶nderme hatasÄ±:', error);
    }
}