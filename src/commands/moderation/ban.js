// src/commands/moderation/ban.js

const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const database = require('../../modules/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ban')
        .setDescription('Bir kullanÄ±cÄ±yÄ± yasaklar')
        .addUserOption(option => 
            option.setName('user')
                .setDescription('Yasaklanacak kullanÄ±cÄ±')
                .setRequired(true))
        .addStringOption(option => 
            option.setName('reason')
                .setDescription('Yasaklama sebebi')
                .setRequired(false))
        .addIntegerOption(option => 
            option.setName('days')
                .setDescription('Silinecek mesaj gÃ¼nÃ¼ (0-7)')
                .setMinValue(0)
                .setMaxValue(7)
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.BanMembers),
    
    async execute(interaction) {
        try {
            // Yetkiyi kontrol et
            if (!interaction.member.permissions.has(PermissionFlagsBits.BanMembers)) {
                return interaction.reply({ 
                    content: 'Bu komutu kullanmak iÃ§in **Ãœyeleri Yasakla** yetkisine sahip olmalÄ±sÄ±n!', 
                    ephemeral: true 
                });
            }

            const user = interaction.options.getUser('user');
            const reason = interaction.options.getString('reason') || 'Sebep belirtilmedi';
            const days = interaction.options.getInteger('days') || 0;
            
            // Hedef kullanÄ±cÄ±yÄ± kontrol et
            const targetMember = await interaction.guild.members.fetch(user.id).catch(() => null);
            
            if (targetMember) {
                // Hedef banlanabilir mi kontrol et
                if (!targetMember.bannable) {
                    return interaction.reply({ 
                        content: 'Bu kullanÄ±cÄ±yÄ± yasaklama yetkim yok veya kullanÄ±cÄ± benden daha yÃ¼ksek bir role sahip.', 
                        ephemeral: true 
                    });
                }

                // Yetkili kendisini veya kendisinden Ã¼st rÃ¼tbeyi banlayamaz
                if (interaction.member.id !== interaction.guild.ownerId) {
                    const executorHighestRole = interaction.member.roles.highest.position;
                    const targetHighestRole = targetMember.roles.highest.position;
                    
                    if (executorHighestRole <= targetHighestRole) {
                        return interaction.reply({ 
                            content: 'Kendinizi veya sizden yÃ¼ksek/eÅŸit roldeki kullanÄ±cÄ±larÄ± yasaklayamazsÄ±nÄ±z.', 
                            ephemeral: true 
                        });
                    }
                }
            }
            
            // KullanÄ±cÄ±yÄ± yasakla
            await interaction.guild.members.ban(user.id, { reason: reason, deleteMessageDays: days });
            
            // BaÅŸarÄ±lÄ± yanÄ±t
            await interaction.reply({ 
                content: `**${user.tag}** baÅŸarÄ±yla yasaklandÄ±. Sebep: ${reason}`, 
                ephemeral: true 
            });
            
            // VeritabanÄ±na kaydet
            await database.modActions.addAction(
                interaction.guild.id,
                user.id,
                interaction.user.id,
                'ban',
                reason,
                null // SÃ¼resiz
            );
            
            // Log gÃ¶nder
            await sendBanLogEmbed(interaction, user, reason, days);

        } catch (error) {
            console.error('Ban komutu hatasÄ±:', error);
            await interaction.reply({ 
                content: 'Komut Ã§alÄ±ÅŸtÄ±rÄ±lÄ±rken bir hata oluÅŸtu!', 
                ephemeral: true 
            });
        }
    }
};

// Log mesajÄ± gÃ¶nderen yardÄ±mcÄ± fonksiyon
async function sendBanLogEmbed(interaction, targetUser, reason, days) {
    try {
        const guild = interaction.guild;
        
        // SQLite'dan log kanalÄ±nÄ± al
        const logChannelId = await database.logs.getLogChannel(guild.id, 'moderation');
        
        if (!logChannelId) {
            console.log('Bu sunucu iÃ§in moderasyon log kanalÄ± ayarlanmamÄ±ÅŸ.');
            return;
        }
        
        // Log kanalÄ±nÄ± bul
        const logChannel = await guild.channels.fetch(logChannelId).catch(() => null);
        if (!logChannel) {
            console.error('Moderasyon log kanalÄ± bulunamadÄ±! ID:', logChannelId);
            return;
        }

        // Embed log mesajÄ± oluÅŸtur
        const logEmbed = new EmbedBuilder()
            .setColor('#ff0000') // KÄ±rmÄ±zÄ±
            .setTitle('ğŸ”¨ KullanÄ±cÄ± YasaklandÄ±')
            .setThumbnail(targetUser.displayAvatarURL())
            .addFields(
                { name: 'KullanÄ±cÄ±', value: `<@${targetUser.id}> (${targetUser.tag})`, inline: true },
                { name: 'ModeratÃ¶r', value: `<@${interaction.user.id}> (${interaction.user.tag})`, inline: true },
                { name: 'Sebep', value: reason || 'Belirtilmedi', inline: false },
                { name: 'Silinen Mesaj GÃ¼nÃ¼', value: `${days} gÃ¼n`, inline: true },
                { name: 'Tarih', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: false }
            )
            .setFooter({ text: `KullanÄ±cÄ± ID: ${targetUser.id}` })
            .setTimestamp();

        // Logu gÃ¶nder
        await logChannel.send({ embeds: [logEmbed] });
    } catch (error) {
        console.error('Ban log gÃ¶nderme hatasÄ±:', error);
    }
}