// src/commands/moderation/linkprotect.js

const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const database = require('../../modules/database');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('linkkoruma')
        .setDescription('Link koruma ayarlarÄ±nÄ± yÃ¶netir')
        .addSubcommand(subcommand =>
            subcommand
                .setName('status')
                .setDescription('Link koruma durumunu gÃ¶rÃ¼ntÃ¼ler'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('toggle')
                .setDescription('Link korumayÄ± aÃ§Ä±p kapatÄ±r')
                .addStringOption(option =>
                    option.setName('state')
                        .setDescription('Koruma durumu')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Aktif', value: 'enable' },
                            { name: 'Devre DÄ±ÅŸÄ±', value: 'disable' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('whitelist-channel')
                .setDescription('Kanal beyaz listeye ekler/Ã§Ä±karÄ±r')
                .addChannelOption(option =>
                    option.setName('channel')
                        .setDescription('Kanal')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('Eylem')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Ekle', value: 'add' },
                            { name: 'Ã‡Ä±kar', value: 'remove' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('whitelist-role')
                .setDescription('Rol beyaz listeye ekler/Ã§Ä±karÄ±r')
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Rol')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('Eylem')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Ekle', value: 'add' },
                            { name: 'Ã‡Ä±kar', value: 'remove' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('whitelist-domain')
                .setDescription('Domain beyaz listeye ekler/Ã§Ä±karÄ±r')
                .addStringOption(option =>
                    option.setName('domain')
                        .setDescription('Domain (Ã¶rn: discord.com)')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('Eylem')
                        .setRequired(true)
                        .addChoices(
                            { name: 'Ekle', value: 'add' },
                            { name: 'Ã‡Ä±kar', value: 'remove' }
                        )))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
        
    async execute(interaction) {
        try {
            // Yetki kontrolÃ¼
            if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return interaction.reply({
                    content: 'Bu komutu kullanmak iÃ§in **YÃ¶netici** yetkisine sahip olmalÄ±sÄ±n!',
                    ephemeral: true
                });
            }

            const subcommand = interaction.options.getSubcommand();
            
            // Link korumasÄ± yapÄ±landÄ±rmasÄ±nÄ± al veya oluÅŸtur
            const config = await getLinkProtectionConfig(interaction.guild.id);
            
            if (subcommand === 'status') {
                return showLinkProtectionStatus(interaction, config);
            }
            else if (subcommand === 'toggle') {
                const state = interaction.options.getString('state');
                return toggleLinkProtection(interaction, config, state);
            }
            else if (subcommand === 'whitelist-channel') {
                const channel = interaction.options.getChannel('channel');
                const action = interaction.options.getString('action');
                return handleWhitelistChannel(interaction, config, channel, action);
            }
            else if (subcommand === 'whitelist-role') {
                const role = interaction.options.getRole('role');
                const action = interaction.options.getString('action');
                return handleWhitelistRole(interaction, config, role, action);
            }
            else if (subcommand === 'whitelist-domain') {
                const domain = interaction.options.getString('domain');
                const action = interaction.options.getString('action');
                return handleWhitelistDomain(interaction, config, domain, action);
            }
        } catch (error) {
            console.error('LinkProtect komutunda hata:', error);
            return interaction.reply({
                content: 'Komut Ã§alÄ±ÅŸtÄ±rÄ±lÄ±rken bir hata oluÅŸtu!',
                ephemeral: true
            });
        }
    }
};

// Link koruma yapÄ±landÄ±rmasÄ±nÄ± al
async function getLinkProtectionConfig(guildId) {
    try {
        // Ã–nce mevcut konfigÃ¼rasyonu al
        let config = await database.get(
            'SELECT * FROM link_protection WHERE guild_id = ?',
            [guildId]
        );
        
        // EÄŸer konfig yoksa yeni oluÅŸtur
        if (!config) {
            await database.run(
                'INSERT OR IGNORE INTO link_protection (guild_id, enabled, whitelist_channels, whitelist_roles, whitelist_domains) VALUES (?, ?, ?, ?, ?)',
                [guildId, 0, '[]', '[]', '[]']
            );
            
            config = await database.get(
                'SELECT * FROM link_protection WHERE guild_id = ?',
                [guildId]
            );
        }
        
        // JSON string'leri parse et
        try {
            config.whitelist_channels = JSON.parse(config.whitelist_channels || '[]');
            config.whitelist_roles = JSON.parse(config.whitelist_roles || '[]');
            config.whitelist_domains = JSON.parse(config.whitelist_domains || '[]');
        } catch (e) {
            config.whitelist_channels = [];
            config.whitelist_roles = [];
            config.whitelist_domains = [];
        }
        
        return config;
    } catch (error) {
        console.error('Link koruma konfigÃ¼rasyonu alÄ±namadÄ±:', error);
        throw error;
    }
}

// Durumu gÃ¶ster
async function showLinkProtectionStatus(interaction, config) {
    const embed = new EmbedBuilder()
        .setColor(config.enabled ? '#00ff00' : '#ff0000')
        .setTitle('ðŸ”— Link Koruma Durumu')
        .setDescription(`Link koruma ÅŸu anda **${config.enabled ? 'Aktif' : 'Devre DÄ±ÅŸÄ±'}**`)
        .setTimestamp();
    
    // Beyaz liste kanallarÄ±
    if (config.whitelist_channels && config.whitelist_channels.length > 0) {
        const channelList = config.whitelist_channels.map(id => `<#${id}>`).join(', ');
        embed.addFields({ name: 'Beyaz Liste KanallarÄ±', value: channelList });
    } else {
        embed.addFields({ name: 'Beyaz Liste KanallarÄ±', value: 'HiÃ§ kanal eklenmemiÅŸ' });
    }
    
    // Beyaz liste rolleri
    if (config.whitelist_roles && config.whitelist_roles.length > 0) {
        const roleList = config.whitelist_roles.map(id => `<@&${id}>`).join(', ');
        embed.addFields({ name: 'Beyaz Liste Rolleri', value: roleList });
    } else {
        embed.addFields({ name: 'Beyaz Liste Rolleri', value: 'HiÃ§ rol eklenmemiÅŸ' });
    }
    
    // Beyaz liste domainleri
    if (config.whitelist_domains && config.whitelist_domains.length > 0) {
        const domainList = config.whitelist_domains.join(', ');
        embed.addFields({ name: 'Beyaz Liste Domainleri', value: domainList });
    } else {
        embed.addFields({ name: 'Beyaz Liste Domainleri', value: 'HiÃ§ domain eklenmemiÅŸ' });
    }
    
    return interaction.reply({ embeds: [embed], ephemeral: true });
}

// Link korumayÄ± aÃ§/kapat
async function toggleLinkProtection(interaction, config, state) {
    const newState = state === 'enable';
    
    try {
        await database.run(
            'UPDATE link_protection SET enabled = ?, updated_at = CURRENT_TIMESTAMP WHERE guild_id = ?',
            [newState ? 1 : 0, interaction.guild.id]
        );
        
        return interaction.reply({
            content: `Link koruma **${newState ? 'Aktif' : 'Devre DÄ±ÅŸÄ±'}** durumuna getirildi.`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Link koruma toggle hatasÄ±:', error);
        throw error;
    }
}

// Kanal beyaz listeye ekle/Ã§Ä±kar
async function handleWhitelistChannel(interaction, config, channel, action) {
    if (action === 'add') {
        // Kanal zaten listedeyse
        if (config.whitelist_channels.includes(channel.id)) {
            return interaction.reply({
                content: `<#${channel.id}> zaten beyaz listede!`,
                ephemeral: true
            });
        }
        
        // KanalÄ± ekle
        config.whitelist_channels.push(channel.id);
    } else if (action === 'remove') {
        // Kanal listede yoksa
        if (!config.whitelist_channels.includes(channel.id)) {
            return interaction.reply({
                content: `<#${channel.id}> beyaz listede deÄŸil!`,
                ephemeral: true
            });
        }
        
        // KanalÄ± Ã§Ä±kar
        config.whitelist_channels = config.whitelist_channels.filter(id => id !== channel.id);
    }
    
    // VeritabanÄ±nÄ± gÃ¼ncelle
    try {
        await database.run(
            'UPDATE link_protection SET whitelist_channels = ?, updated_at = CURRENT_TIMESTAMP WHERE guild_id = ?',
            [JSON.stringify(config.whitelist_channels), interaction.guild.id]
        );
        
        return interaction.reply({
            content: `<#${channel.id}> beyaz listeden ${action === 'add' ? 'eklendi' : 'Ã§Ä±karÄ±ldÄ±'}.`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Beyaz liste kanal gÃ¼ncelleme hatasÄ±:', error);
        throw error;
    }
}

// Rol beyaz listeye ekle/Ã§Ä±kar
async function handleWhitelistRole(interaction, config, role, action) {
    if (action === 'add') {
        // Rol zaten listedeyse
        if (config.whitelist_roles.includes(role.id)) {
            return interaction.reply({
                content: `<@&${role.id}> zaten beyaz listede!`,
                ephemeral: true
            });
        }
        
        // RolÃ¼ ekle
        config.whitelist_roles.push(role.id);
    } else if (action === 'remove') {
        // Rol listede yoksa
        if (!config.whitelist_roles.includes(role.id)) {
            return interaction.reply({
                content: `<@&${role.id}> beyaz listede deÄŸil!`,
                ephemeral: true
            });
        }
        
        // RolÃ¼ Ã§Ä±kar
        config.whitelist_roles = config.whitelist_roles.filter(id => id !== role.id);
    }
    
    // VeritabanÄ±nÄ± gÃ¼ncelle
    try {
        await database.run(
            'UPDATE link_protection SET whitelist_roles = ?, updated_at = CURRENT_TIMESTAMP WHERE guild_id = ?',
            [JSON.stringify(config.whitelist_roles), interaction.guild.id]
        );
        
        return interaction.reply({
            content: `<@&${role.id}> beyaz listeden ${action === 'add' ? 'eklendi' : 'Ã§Ä±karÄ±ldÄ±'}.`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Beyaz liste rol gÃ¼ncelleme hatasÄ±:', error);
        throw error;
    }
}

// Domain beyaz listeye ekle/Ã§Ä±kar
async function handleWhitelistDomain(interaction, config, domain, action) {
    // Domain'i normalize et (http://, https://, www. kÄ±sÄ±mlarÄ±nÄ± kaldÄ±r)
    const normalizedDomain = normalizeDomain(domain);
    
    if (action === 'add') {
        // Domain zaten listedeyse
        if (config.whitelist_domains.includes(normalizedDomain)) {
            return interaction.reply({
                content: `\`${normalizedDomain}\` zaten beyaz listede!`,
                ephemeral: true
            });
        }
        
        // Domain'i ekle
        config.whitelist_domains.push(normalizedDomain);
    } else if (action === 'remove') {
        // Domain listede yoksa
        if (!config.whitelist_domains.includes(normalizedDomain)) {
            return interaction.reply({
                content: `\`${normalizedDomain}\` beyaz listede deÄŸil!`,
                ephemeral: true
            });
        }
        
        // Domain'i Ã§Ä±kar
        config.whitelist_domains = config.whitelist_domains.filter(d => d !== normalizedDomain);
    }
    
    // VeritabanÄ±nÄ± gÃ¼ncelle
    try {
        await database.run(
            'UPDATE link_protection SET whitelist_domains = ?, updated_at = CURRENT_TIMESTAMP WHERE guild_id = ?',
            [JSON.stringify(config.whitelist_domains), interaction.guild.id]
        );
        
        return interaction.reply({
            content: `\`${normalizedDomain}\` beyaz listeden ${action === 'add' ? 'eklendi' : 'Ã§Ä±karÄ±ldÄ±'}.`,
            ephemeral: true
        });
    } catch (error) {
        console.error('Beyaz liste domain gÃ¼ncelleme hatasÄ±:', error);
        throw error;
    }
}

// Domain'i normalize et
function normalizeDomain(domain) {
    let normalizedDomain = domain.toLowerCase();
    
    // http:// veya https:// kaldÄ±r
    normalizedDomain = normalizedDomain.replace(/^https?:\/\//, '');
    
    // www. kaldÄ±r
    normalizedDomain = normalizedDomain.replace(/^www\./, '');
    
    // Sondaki slash'Ä± kaldÄ±r
    normalizedDomain = normalizedDomain.replace(/\/$/, '');
    
    // Parametreleri kaldÄ±r (? sonrasÄ±)
    normalizedDomain = normalizedDomain.split('?')[0];
    
    // Path kÄ±smÄ±nÄ± kaldÄ±r (/ sonrasÄ±, eÄŸer domain'in kendisindeki ilk / deÄŸilse)
    const pathStart = normalizedDomain.indexOf('/', normalizedDomain.indexOf('.') + 1);
    if (pathStart !== -1) {
        normalizedDomain = normalizedDomain.substring(0, pathStart);
    }
    
    return normalizedDomain;
}